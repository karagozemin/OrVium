"""
Phishing Detector - Free & Reliable
EthIstanbul Hackathon Project
Multi-source threat intelligence with GoPlus + EtherScamDB
"""

import asyncio
import aiohttp
import json
import os
import time
import re
from typing import Dict, List, Optional
from datetime import datetime
import logging

class FreePhishingDetector:
    """
    √úcretsiz ve g√ºvenilir phishing detector
    GoPlus Security API + EtherScamDB + Local Intelligence
    """
    
    def __init__(self):
        # API endpoints (√ºcretsiz)
        self.goplus_api = "https://api.gopluslabs.io/api/v1/address_security"
        self.etherscamdb_api = "https://api.etherscamdb.info/v1/scams"
        
        # Cache system
        self._cache = {}
        self._cache_ttl = 300  # 5 dakika cache
        
        # Rate limiting (√ºcretsiz tier limits)
        self._last_request = {}
        self._min_interval = 1  # 1 saniye minimum interval
        
        # Local blacklist (bilinen scam adresleri)
        self.local_blacklist = {
            # Bilinen phishing adresleri (√∂rnekler)
            '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',  # Fake Uniswap
            '0x514910771af9ca656af840dff83e8264ecf986ca',  # Suspicious contract
        }
        
        # EtherScamDB cache
        self.scam_database = None
        self.scam_db_last_update = 0
        
        print("üõ°Ô∏è Free Phishing Detector initialized")
        print("üì° Sources: GoPlus Security + EtherScamDB + Local Intelligence")
    
    async def verify_address(self, address: str) -> Dict:
        """
        Ana verify fonksiyonu - chat'ten √ßaƒürƒ±lacak
        """
        try:
            # Address format kontrol√º
            if not self._validate_address_format(address):
                return {
                    'address': address,
                    'is_safe': False,
                    'risk_level': 'invalid',
                    'risk_score': 100,
                    'warnings': ['Invalid Ethereum address format'],
                    'recommendations': ['Please check the address format (0x + 40 hex characters)'],
                    'sources_checked': ['format_validation'],
                    'timestamp': datetime.now().isoformat()
                }
            
            # Cache kontrol√º
            cache_key = f"verify_{address.lower()}"
            if self._check_cache(cache_key):
                cached_result = self._cache[cache_key]['data']
                cached_result['from_cache'] = True
                return cached_result
            
            print(f"üîç Verifying address: {address}")
            
            # Paralel kontroller
            tasks = [
                self._check_local_blacklist(address),
                self._check_goplus_security(address),
                self._check_etherscamdb(address)
            ]
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Sonu√ßlarƒ± birle≈ütir
            analysis = self._combine_results(address, results)
            
            # Cache'e kaydet
            self._cache[cache_key] = {
                'data': analysis,
                'timestamp': time.time()
            }
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå Verification error: {str(e)}")
            return {
                'address': address,
                'is_safe': False,
                'risk_level': 'error',
                'risk_score': 50,
                'warnings': [f'Verification failed: {str(e)}'],
                'recommendations': ['Manual verification recommended'],
                'sources_checked': ['error'],
                'timestamp': datetime.now().isoformat(),
                'error': str(e)
            }
    
    async def _check_local_blacklist(self, address: str) -> Dict:
        """Local blacklist kontrol√º"""
        try:
            result = {
                'source': 'local_blacklist',
                'risk_score': 0,
                'warnings': [],
                'details': {}
            }
            
            if address.lower() in [addr.lower() for addr in self.local_blacklist]:
                result['risk_score'] = 100
                result['warnings'].append('Address found in local blacklist')
                result['details']['blacklist_reason'] = 'Known phishing/scam address'
            
            # Pattern analizi
            if self._analyze_suspicious_patterns(address):
                result['risk_score'] += 30
                result['warnings'].append('Suspicious address pattern detected')
            
            return result
            
        except Exception as e:
            return {'source': 'local_blacklist', 'error': str(e), 'risk_score': 0}
    
    async def _check_goplus_security(self, address: str) -> Dict:
        """GoPlus Security API kontrol√º"""
        try:
            # Rate limiting
            if not self._check_rate_limit('goplus'):
                await asyncio.sleep(1)
            
            params = {
                'chain_id': '1',  # Ethereum mainnet
                'addresses': address
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(self.goplus_api, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                    else:
                        raise Exception(f"GoPlus API error: {response.status}")
            
            result = {
                'source': 'goplus_security',
                'risk_score': 0,
                'warnings': [],
                'details': {}
            }
            
            if data.get('code') == 1 and address in data.get('result', {}):
                addr_data = data['result'][address]
                
                # Phishing kontrol√º
                if addr_data.get('is_phishing') == 1:
                    result['risk_score'] = 95
                    result['warnings'].append('PHISHING ADDRESS detected by GoPlus')
                
                # Honeypot kontrol√º
                if addr_data.get('is_honeypot') == 1:
                    result['risk_score'] += 80
                    result['warnings'].append('Honeypot contract detected')
                
                # Malicious behavior kontrol√º
                malicious_behaviors = addr_data.get('malicious_behavior', [])
                if malicious_behaviors:
                    result['risk_score'] += len(malicious_behaviors) * 20
                    for behavior in malicious_behaviors:
                        result['warnings'].append(f'Malicious behavior: {behavior}')
                
                # Contract analizi
                if addr_data.get('is_contract') == 1:
                    result['details']['is_contract'] = True
                    if addr_data.get('is_proxy') == 1:
                        result['risk_score'] += 15
                        result['warnings'].append('Proxy contract detected')
                    
                    # Trust list kontrol√º
                    trust_list = addr_data.get('trust_list', 0)
                    if trust_list == 1:
                        result['risk_score'] = max(0, result['risk_score'] - 30)
                        result['warnings'].append('Contract in GoPlus trust list')
                
                result['details']['goplus_data'] = addr_data
            
            self._update_rate_limit('goplus')
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è GoPlus API error: {str(e)}")
            return {'source': 'goplus_security', 'error': str(e), 'risk_score': 10}
    
    async def _check_etherscamdb(self, address: str) -> Dict:
        """EtherScamDB kontrol√º"""
        try:
            # Scam database'i g√ºncelle (24 saatte bir)
            if not self.scam_database or (time.time() - self.scam_db_last_update) > 86400:
                await self._update_scam_database()
            
            result = {
                'source': 'etherscamdb',
                'risk_score': 0,
                'warnings': [],
                'details': {}
            }
            
            if self.scam_database:
                # Adres kontrol√º
                for scam in self.scam_database.get('result', []):
                    if scam.get('addresses'):
                        for scam_addr in scam['addresses']:
                            if scam_addr.lower() == address.lower():
                                result['risk_score'] = 100
                                result['warnings'].append(f'SCAM detected: {scam.get("name", "Unknown")}')
                                result['details']['scam_type'] = scam.get('category', 'Unknown')
                                result['details']['scam_name'] = scam.get('name', 'Unknown')
                                break
                    
                    if result['risk_score'] > 0:
                        break
            
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è EtherScamDB error: {str(e)}")
            return {'source': 'etherscamdb', 'error': str(e), 'risk_score': 5}
    
    async def _update_scam_database(self):
        """EtherScamDB database'ini g√ºncelle"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.etherscamdb_api, timeout=30) as response:
                    if response.status == 200:
                        self.scam_database = await response.json()
                        self.scam_db_last_update = time.time()
                        print("‚úÖ EtherScamDB updated successfully")
                    else:
                        print(f"‚ö†Ô∏è EtherScamDB update failed: {response.status}")
        except Exception as e:
            print(f"‚ùå EtherScamDB update error: {str(e)}")
    
    def _combine_results(self, address: str, results: List) -> Dict:
        """T√ºm kaynaklardan gelen sonu√ßlarƒ± birle≈ütir"""
        analysis = {
            'address': address,
            'timestamp': datetime.now().isoformat(),
            'overall_risk_score': 0,
            'risk_level': 'low',
            'is_safe': True,
            'warnings': [],
            'recommendations': [],
            'sources_checked': [],
            'source_details': {},
            'confidence': 0.0
        }
        
        total_risk = 0
        active_sources = 0
        
        for result in results:
            if isinstance(result, Exception):
                continue
            
            if isinstance(result, dict) and 'source' in result:
                source = result['source']
                analysis['sources_checked'].append(source)
                
                if 'error' not in result:
                    risk_score = result.get('risk_score', 0)
                    total_risk += risk_score
                    active_sources += 1
                    
                    # Warnings'leri topla
                    if 'warnings' in result:
                        analysis['warnings'].extend(result['warnings'])
                    
                    # Source details'i kaydet
                    analysis['source_details'][source] = result
        
        # Overall risk score hesapla
        if active_sources > 0:
            analysis['overall_risk_score'] = min(100, total_risk / active_sources)
            analysis['confidence'] = min(1.0, active_sources / 3)  # 3 source var
        
        # Risk level belirle
        if analysis['overall_risk_score'] >= 80:
            analysis['risk_level'] = 'critical'
            analysis['is_safe'] = False
        elif analysis['overall_risk_score'] >= 60:
            analysis['risk_level'] = 'high'
            analysis['is_safe'] = False
        elif analysis['overall_risk_score'] >= 30:
            analysis['risk_level'] = 'medium'
            analysis['is_safe'] = False
        else:
            analysis['risk_level'] = 'low'
            analysis['is_safe'] = True
        
        # Recommendations olu≈ütur
        analysis['recommendations'] = self._generate_recommendations(analysis)
        
        return analysis
    
    def _generate_recommendations(self, analysis: Dict) -> List[str]:
        """Risk seviyesine g√∂re √∂neriler olu≈ütur"""
        recommendations = []
        risk_score = analysis['overall_risk_score']
        
        if risk_score >= 80:
            recommendations.extend([
                "DO NOT INTERACT with this address",
                "Block this address in your wallet",
                "Report to security team if you received tokens from this address",
                "Check if you have any pending transactions with this address"
            ])
        elif risk_score >= 60:
            recommendations.extend([
                "HIGH RISK - Avoid transactions with this address",
                "Verify the address through official channels",
                "Never send large amounts to this address",
                "Document any interactions for security review"
            ])
        elif risk_score >= 30:
            recommendations.extend([
                "MEDIUM RISK - Exercise caution",
                "Double-check address with the recipient",
                "Consider using smaller amounts for testing",
                "Monitor transactions closely"
            ])
        else:
            recommendations.extend([
                "Address appears safe based on available data",
                "Continue with normal security practices",
                "Regular monitoring is still recommended"
            ])
        
        # Source-specific recommendations
        if len(analysis['sources_checked']) < 2:
            recommendations.append("Limited data sources - consider additional verification")
        
        return recommendations
    
    def _validate_address_format(self, address: str) -> bool:
        """Ethereum address format kontrol√º"""
        if not address:
            return False
        
        # 0x ile ba≈ülamalƒ± ve 42 karakter olmalƒ±
        if not address.startswith('0x') or len(address) != 42:
            return False
        
        # Hex karakterler kontrol√º
        try:
            int(address[2:], 16)
            return True
        except ValueError:
            return False
    
    def _analyze_suspicious_patterns(self, address: str) -> bool:
        """≈û√ºpheli adres pattern'lerini analiz et"""
        # √áok fazla sƒ±fƒ±r (vanity address attack)
        if address.count('0') > 35:
            return True
        
        # Tekrarlayan karakterler
        for char in '0123456789abcdef':
            if address.lower().count(char) > 30:
                return True
        
        return False
    
    def _check_rate_limit(self, source: str) -> bool:
        """Rate limit kontrol√º"""
        now = time.time()
        if source in self._last_request:
            return (now - self._last_request[source]) >= self._min_interval
        return True
    
    def _update_rate_limit(self, source: str):
        """Rate limit g√ºncelle"""
        self._last_request[source] = time.time()
    
    def _check_cache(self, key: str) -> bool:
        """Cache kontrol√º"""
        if key in self._cache:
            cache_time = self._cache[key]['timestamp']
            return (time.time() - cache_time) < self._cache_ttl
        return False

# Global instance
phishing_detector = FreePhishingDetector()

# Test function
async def test_detector():
    """Test function"""
    test_addresses = [
        '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',  # Uniswap token (safe)
        '0x0000000000000000000000000000000000000000',  # Null address
        '0x742d35Cc6634C0532925a3b8D5C2d3b5c5b5b5b5',  # Random address
    ]
    
    for addr in test_addresses:
        print(f"\nüîç Testing: {addr}")
        result = await phishing_detector.verify_address(addr)
        print(f"‚úÖ Result: {result['risk_level']} risk, Score: {result['overall_risk_score']}")
        for warning in result['warnings'][:2]:  # ƒ∞lk 2 warning'i g√∂ster
            print(f"‚ö†Ô∏è {warning}")

if __name__ == "__main__":
    # Test √ßalƒ±≈ütƒ±r
    asyncio.run(test_detector())
